#! /usr/bin/env python
from gi.repository import Gtk, GLib
import os,time

#Hack for pygtk ignoring ^C
import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)

class Battery():
    def __init__(self, id):
        self.id = id
        self.voltage = self.get("voltage_now") / 1000
        self.status = self.gets("status")
        self.state = self.status == "Charging"
        if os.path.exists (os.path.join("/sys/class/power_supply",self.id,"energy_full")):
          self.max = self.get("energy_full")/ self.voltage
          self.orig_max = self.get("energy_full_design")/ self.voltage
          self.now = self.get("energy_now")/ self.voltage
          self.rate = self.get("power_now") / self.voltage
        else:
          self.max = self.get("charge_full") / 1000
          self.orig_max = self.get("charge_full_design") / 1000
          self.now = self.get("charge_now") / 1000
          self.rate = self.get("current_now") / 1000
        try:
          assert (os.path.exists (os.path.join ("/sys/devices/platform/smapi/",self.id)))
          assert (self.tpget ("installed") is 1)
          self.tp = True
          self.dom = self.tpgets ("manufacture_date")
          self.temp = self.tpget ("temperature")/1000
          self.range = "%i%% – %i%%" % (self.tpget ("start_charge_thresh"),self.tpget("stop_charge_thresh"))
          self.inhibit = self.tpget ("inhibit_charge_minutes")
          self.forced = self.tpget ("force_discharge") is 1
        except Exception as e:
          self.tp = False

    def get (self, attr):
      try:    return int(self.gets   (attr))
      except: return 0
    def tpget (self, attr):
      try:    return int(self.tpgets (attr))
      except: return 0

    def gets (self, attr):   return self._get (os.path.join ("/sys/class/power_supply",      self.id,attr))
    def tpgets (self, attr): return self._get (os.path.join ("/sys/devices/platform/smapi/", self.id,attr))

    def _get (self, path):
      try:
        with open (path) as f: return "\n".join(f.readlines()).strip()
      except: return ""

    def get_percent (self):
      try:    return self.now / self.max
      except: return 0

    def get_designpercent (self):
      try:    return self.now / self.orig_max
      except: return 0

    def ttl (self):
      try:
        if self.tp: ttl = self.tpget ("remaining_running_time") * 60
        else:
          if self.state: ttl = 3600 * (self.max - self.now) / self.rate
          else: ttl =  3600 * self.now / self.rate
        return time.strftime ("%T", time.gmtime(ttl))
      except: return "(unknown)"

    def __str__ (self):
        retval = "Battery %s: %s %.2f%% (%.2f%% of design capacity), %s remaining" % (self.id, self.status, self.get_percent()*100, self.get_designpercent()*100, self.ttl())
        retval +="\n\t%s %s (S/N %s), %i mAh / %i Wh" % (self.gets("manufacturer"), self.gets("model_name"), self.gets("serial_number"), self.max, int (self.max*self.voltage/1000000.0))
        if self.tp:
          retval += "\n\tTemperature: %i°C\n\tCharge range: %s\n\tDate of manufacture: %s" %(self.temp,self.range,self.dom)
          if self.inhibit > 0: retval += "\n\tCharging inhibited for %i minutes" % self.inhibit
          if self.forced:      retval += "\n\tForced discharge active"
        return retval

class TrayIcon():
    def __init__(self):
        self.icon = Gtk.StatusIcon()
        self.icon.embedded = True;
        self.last_state = "";
        self.update_icon()
        self.icon.set_visible(True)
        GLib.timeout_add_seconds(5, self.update_icon)

    def destroy (self, widget, data=None):
        Gtk.main_quit()

    def main(self):
        Gtk.main()

    def update_icon(self):
        self.batteries = {}
        for entry in os.listdir ("/sys/class/power_supply"):
          if "BAT" in entry:
            self.batteries[entry] = Battery(entry)

        if not self.batteries:
          self.icon.set_from_stock(Gtk.STOCK_CONNECT)
          self.icon.set_tooltip_text("No battery found.")
          return True

        status = 0
        charging = False
        ac = False
        with open ("/sys/class/power_supply/AC/online") as f: ac = int (f.readline().strip()) is 1
        for battery in self.batteries:
          status += self.batteries[battery].get_percent()
          charging |= self.batteries[battery].state
        status /= len(self.batteries)
        if status < 0.25:   state = "crit"
        elif status < 0.5:  state = "low"
        elif status < 0.75: state = "high"
        else:               state = "full"

        if status < 0.1:
          os.system ("notify-send 'Battery low!' -i battery-caution")

        self.icon.set_tooltip_text ("\n".join([str(self.batteries[battery]) for battery in self.batteries]))
        if status != self.last_state:
          iconname = "/usr/share/pixmaps/battery/battery-"+state+ ("-charging" if charging else "")
          iconname += "-ac.png" if ac else ".png"
          self.icon.set_from_file(iconname)
        self.last_state = status

        return True

if __name__ == "__main__":
    i = TrayIcon()
    i.main()
